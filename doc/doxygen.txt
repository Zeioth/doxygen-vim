*doxygen.txt*  Automatic Doxygen management for VIM

        ,---,
      ,---.'|   ,---.                                                ,---,
      |   | :  '   ,'\ ,--,  ,--,           ,----._,.            ,-+-. /  |
      |   | | /   /   ||'. \/ .`|     .--, /   /  ' /   ,---.   ,--.'|'   |
    ,--.__| |.   ; ,. :'  \/  / ;   /_ ./||   :     |  /     \ |   |  ,"' |
   /   ,'   |'   | |: : \  \.' / , ' , ' :|   | .\  . /    /  ||   | /  | |
  .   '  /  |'   | .; :  \  ;  ;/___/ \: |.   ; ';  |.    ' / ||   | |  | |
  '   ; |:  ||   :    | / \  \  \.  \  ' |'   .   . |'   ;   /||   | |  |/
  |   | '/  ' \   \  /./__;   ;  \\  ;   : `---`-'| |'   |  / ||   | |--'
  |   :    :|  `----' |   :/\  \ ; \  \  ; .'__/\_: ||   :    ||   |/
   \   \  /           `---'  `--`   :  \  \|   :    : \   \  / '---'
    `----'                           \  ' ; \   \  /   `----'
                                      `--`   `--`-'


                DOXYGEN REFERENCE MANUAL
                    by Adrian Lopez

                                                *doxygen*

1. Introduction             |doxygen-intro|
2. Commands                 |doxygen-commands|
3. Global Settings          |doxygen-settings|
4. Project Settings         |doxygen-project-settings|

=============================================================================
1. Introduction                                 *doxygen-intro*

Doxygen is a plugin that takes care of the management of doxygen
documentation in Vim. It will (re)generate doxygen documentation as you work
while staying completely out of your way.

In order to generate documentation, doxygen will have to figure out what's in
your project. To do this, it will locate well-known project root markers like
SCM folders (.git, .hg, etc.), any custom markers you define (with
|doxygen_project_root|).


=============================================================================
2. Commands                                     *doxygen-commands*

                                                *doxygen-project-commands*
The following commands are only available in buffers that have been found to
belong to a project that should be managed by doxygen. See
|doxygen_project_root| for how doxygen figures out the project a file
belongs to. When no project is found (i.e. the file is not under any of the
known project markers), doxygen is disabled for that buffer, and the
following commands and remarks don't apply.

If you want to force-disable doxygen for a given project even though it does
match one of the items in |doxygen_project_root|, create a file named
"`.nodoxygen`" at the root of the project.

                                                *:DoxygenRegen*
:DoxygenRegen
                        Manually (re)generate the Doxygen documentation.
                        This can be useful when |doxygen_auto_regen| is set to
                        0.



Some debugging/troubleshooting commands are also available if the
|doxygen_define_advanced_commands| global setting is set to 1.

:DoxygenOpen
                        Opens the documentation file on the browser. Both the
                        file and the browser can be customized with
                        |doxygen_browser_file| and |doxygen_browser_cmd|.




Some debugging/troubleshooting commands are also available if the
|doxygen_define_advanced_commands| global setting is set to 1.


                                                *:doxygenToggleEnabled*
:DoxygenToggleEnabled
                        Disables and re-enables doxygen.
                        When doxygen is disabled, it won't (re)generate
                        doxygen when you save a buffer. It will however still
                        look for project markers as you open new buffers so
                        that they can start working again when you re-enable
                        doxygen.

                        {only available when
                        |doxygen_define_advanced_commands| is set}

                                                *doxygenToggleTrace*
:DoxygenToggleTrace
                        If you want to keep an eye on what doxygen is doing,
                        you can enable tracing. This will show messages every
                        time doxygen does something. It can get annoying
                        quickly, since it will require you to press a key to
                        dismiss those messages, but it can be useful to
                        troubleshoot a problem.

                        {only available when
                        |doxygen_define_advanced_commands| is set}


=============================================================================
3. Global Settings                              *doxygen-settings*

The following settings can be defined in your |vimrc| to change the default
behaviour of doxygen.

                                                *doxygen_enabled*
g:doxygen_enabled
                        Defines whether doxygen should be enabled. When
                        disabled, doxygen will still scan for project root
                        markers when opening buffers. This is so that when you
                        re-enable doxygen, you won't have some buffers
                        mysteriously working while others (those open last)
                        don't.

                        Defaults to `1`.

                                                *doxygen_trace*
g:doxygen_trace
                        When true, doxygen will spit out debugging
                        information as Vim messages (which you can later read
                        with |:messages|).

                        Defaults to `0`.

                                                *doxygen_project_root*
g:doxygen_project_root
                        When a buffer is loaded, doxygen will figure out if
                        it's part of a project that should have doxygen managed
                        automatically. To do this, it looks for "root markers"
                        in the current file's directory and its parent
                        directories. If it finds any of those markers,
                        doxygen will be enabled for the project, and a
                        doxyfile directory will be created at the project root.

                        The default markers are:
                        `['.git', '.hg', '.svn', '.bzr', '_darcs', '_darcs', '_FOSSIL_', '.fslckout']`


                                                *doxygen_exclude_filetypes*
g:doxygen_exclude_filetypes
                        A |List| of file types (see |'filetype'|) that doxygen
                        should ignore. When a buffer is opened, if its
                        'filetype' is found in this list, doxygen features
                        won't be available for this buffer.
                        Defaults to an empty list (`[]`).

                                                *doxygen_exclude_project_root*
g:doxygen_exclude_project_root
                        A list of project roots to generally ignore. If a file
                        is opened inside one of those projects, doxygen
                        won't be activated. This is similar to placing
                        a `.nodoxygen` file in the root of those projects, but
                        can be useful when you don't want to, or can't, place
                        such a file there.
                        Defaults to `['/usr/local', '/opt/homebrew', '/home/linuxbrew/.linuxbrew']`,
                        which are the folders where Homebrew is known to
                        create a Git repository by default.

                                                *doxygen_project_root_finder*
g:doxygen_project_root_finder
                        When a buffer is loaded, doxygen uses a default
                        (internal) implementation to find that file's
                        project's root directory, using settings like
                        |g:doxygen_project_root|. When you specify
                        |g:doxygen_project_root_finder|, you can tell
                        doxygen to use a custom implementation, such as
                        `vim-projectroot`. The value of this setting must be
                        the name of a function that takes a single string
                        argument (the path to the current buffer's file) and
                        returns a string value (the project's root directory).
                        Defaults to `''`.
                        Note: when set, the called implementation will
                        possibly ignore |g:doxygen_project_root|.
                        Note: an implementation can fallback to the default
                        behaviour by calling
                        `doxygen#default_get_project_root`.

                                                *doxygen_generate_on_new*
g:doxygen_generate_on_new
                        If set to 1, doxygen will start generating the docs
                        when a new project is open. A new project is
                        considered open when a buffer is created for a file
                        that has not been "seen" yet
                        in the current Vim session -- which pretty much means
                        when you open the first file in a given source control
                        repository.
                        When set to 0, doxygen won't do anything special.

                        Defaults to 1.

                                                *doxygen_generate_on_write*
g:doxygen_generate_on_write
                        If set to 1, doxygen will (re)generate Doxygen
                        documentation when a file inside that project is
                        saved. See |doxygen_project_root| for how doxygen
                        locates the project.
                        When set to 0, doxygen won't do anything on save.
                        This means that the docs won't reflect
                        the latest changes, and you will have to run
                        |DoxygenUpdate| manually.
                        Defaults to 1.

                                            *doxygen_generate_on_empty_buffer*
g:doxygen_generate_on_empty_buffer
                        If set to 1, doxygen will start generating the Doxygen
                        documentation even if there's no buffer currently open,
                        as long as the current working directory (as returned by
                        |:cd|) is inside a known project.
                        This is useful if you want doxygen to generate the
                        docs right after opening Vim.

                        Defaults to 0.

                                            *doxygen_resolve_symlinks*
g:doxygen_resolve_symlinks
                        When set to 1, doxygen will resolve any symlinks in
                        the current buffer's path in order to find the project
                        it belongs to. This is what you want if you're editing
                        a symlink located outside of the project, and it
                        points to a file inside the project. However, this is
                        maybe not what you want if the symlink itself is
                        part of the project.
                        Defaults to 0.

                                            *doxygen_init_user_func*
g:doxygen_init_user_func
                        When set to a non-empty string, it is expected to be
                        the name of a function that will be called when a file
                        is opened in a project. The function gets passed the
                        path of the file and if it returns 0, doxygen won't
                        be enabled for that file.

                        You can use this to manually set buffer-local
                        settings:

                        Defaults to "".

                                            *doxygen_define_advanced_commands*
g:doxygen_define_advanced_commands
                        Defines some advanced commands like
                        |DoxygenToggleEnabled|.

                                            *doxygen_auto_setup*
g:doxygen_auto_setup
                        When set to 1, it will clone |doxygen_clone_config_repo|
                        into the project's root directory. Specifically, on the
                        subdirectory defined on |doxygen_clone_destiny_dir|.

                        Please, note that even though |doxygen_auto_setup|
                        will setup doxygen for you, you are still responsable
                        for adding your doxygen directory to the .gitignore
                        in case you don't want it to be pushed to git by
                        accident.

                        Defaults to 1.

                                            *doxygen_clone_config_repo*
g:doxygen_clone_config_repo
                        When using this plugin, Doxyfiles are never generated
                        locally. Instead they are downloaded from a
                        repository. This way makes easy to use
                        customized doxyfiles.

                        The default repository is meant for testing purposes
                        only and it is strongly encouraged for users to fork
                        and customize. This improves security too.

                        Defaults to "https://github.com/Zeioth/doxygenvim-template.git".


                                            *doxygen_clone_cmd*
g:doxygen_clone_cmd
                        This global variable can be handy for users who prefer
                        not using git.

                        Defaults to "git clone".

                                            *doxygen_clone_destiny_dir*
g:doxygen_clone_destiny_dir
                        Where to clone the doxyfile directory from the
                        projec's root directory.

                        Defaults to "./.project-documentation".

                                            *doxygen_auto_regen*
g:doxygen_auto_regen
                        When setted to 1, doxygen will automatically generate
                        the documentation for you.

                        If you prefer to generate the docs manually, you can
                        use the command |DoxygenRegen|, or
                        |doxygen_shortcut_regen|. In this case you might want
                        to set this this global to 0.

                        Defaults to 1.

                                            *doxygen_cmd*
g:doxygen_cmd
                        This is the command that Doxygen uses to generate the
                        project documentation.

                        Be careful if you change it:
                        By general rule, it is important to
                        cd to the directory where the doxyfile lives.

                        This is because the paths defined in the doxyfile are
                        relative to the directory where the doxygen command is
                        executed from.

                        Please, take the default value of this global as reference.

                        Defaults to "cd ./.project-documentation/doxygen-conf/ && doxygen ./doxyfile.dox".


                                            *doxygen_browser_cmd*
g:doxygen_browser_cmd
                        It is the program that will be used to open
                        |doxygen_browser_file|.

                        This can be your internet browser, or anything else,
                        really.

                        Defaults to "xdg-open".

                                            *doxygen_browser_file*
g:doxygen_browser_file
                        The file that will be opened by the command
                        |DoxygenOpen| or the keybinding defined in
                        |doxygen_shortcut_open|.

                        Defaults to "/.project-documentation/html/index.html".

                                            *doxygen_shortcut_regen*
g:doxygen_shortcut_regen
                        Customizable keybinding / kb / shortcut to manually
                        regen Doxygen documentation.

                        We let users to define keybindings, to avoid
                        colisions.

                        Defaults to "".


                                            *doxygen_shortcut_open*
g:doxygen_shortcut_open
                        Customizable keybinding / kb / shortcut to open
                        the documentation.

                        To configure what this keybinding does, check
                        |doxygen_browser_cmd| and |doxygen_browser_file|.

                        We let users to define keybindings, to avoid
                        colisions.

                        Defaults to "".



=============================================================================
4. Project Settings                             *doxygen-project-settings*

doxygen can be customized to some extent on a per-project basis with the
following files present in the project root directory:

                                                *doxygen-.nodoxygen*
`.nodoxygen`: if this file exists, doxygen will be disabled completely for that
project.


 vim:tw=78:et:ft=help:norl:
